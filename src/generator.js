import { execSync } from 'child_process';

// Utility function to detect GitHub CLI
function detectGitHubCLI() {
  try {
    execSync('which gh', { stdio: 'pipe' });
    return true;
  } catch {
    return false;
  }
}

export async function generateMarkdown(config) {
  const date = new Date().toISOString().split('T')[0];
  const profileName = config.profileName || 'custom';
  
  return `# üöÄ Claude Code Project Setup

<!-- Generated by Claude Kickstart v1.0.0 -->
<!-- Profile: ${profileName} -->
<!-- Created: ${date} -->

## Project Overview
- **Type**: ${getProjectTypeLabel(config.projectType)}
- **Stack**: ${getStackLabel(config.stack, config.customStack)}
- **Language**: ${getLanguageLabel(config.language, config.customLanguage)}
- **Database**: ${getDatabaseLabel(config.database, config.customDatabase) || 'None'}
- **Deploy Target**: ${getDeploymentLabel(config.deployment)}

## üéØ Critical Instructions for Claude

When you run \`/init\` in this project:

1. **THINK FIRST** - Use \`think\` to plan the architecture before coding
2. Create the exact file structure shown below
3. Install all dependencies listed
4. Set up configuration files with the specified settings
5. Create a working "Hello World" example
6. Verify everything works with the test command

## üìÅ Project Structure
\`\`\`
${generateFileStructure(config)}
\`\`\`

## üì¶ Dependencies to Install

### Production Dependencies
\`\`\`bash
${config.packageManager || 'npm'} install ${generateDependencies(config)}
\`\`\`

### Dev Dependencies
\`\`\`bash
${config.packageManager || 'npm'} install -D ${generateDevDependencies(config)}
\`\`\`

## ‚öôÔ∏è Configuration Files

${generateConfigFiles(config)}

## üßë‚Äçüíª Developer Preferences

### Coding Style
${config.codeStyle?.map(style => `- ${getCodeStyleLabel(style)}`).join('\n') || '- Standard practices'}

### Claude Behavior
${config.claudeBehavior?.map(behavior => `- ${getClaudeBehaviorLabel(behavior)}`).join('\n') || '- Standard workflow'}

### Git Workflow
- Commits: ${getGitCommitLabel(config.gitCommitStyle)}
- Branches: ${getBranchStrategyLabel(config.branchStrategy)}

## üß™ Testing Strategy

Framework: ${getTestingLabel(config.testing)}

${generateTestingStrategy(config)}

## üé® UI Development

### Styling
- Approach: ${getStylingLabel(config.styling)}
- Component Library: ${getComponentLibraryLabel(config.componentLibrary)}

${generateUIGuidelines(config)}

## üîê Security Checklist

${generateSecurityGuidelines(config)}

## üìù Common Commands

\`\`\`bash
# Development
${config.packageManager || 'npm'} run dev

# Testing
${config.packageManager || 'npm'} test
${config.packageManager || 'npm'} test:watch

# Building
${config.packageManager || 'npm'} run build

# Linting
${config.packageManager || 'npm'} run lint
\`\`\`

${generateGitHubCLISection()}

${generateMCPSection(config)}

${generateToolAllowlistSection(config)}

${generateWorkflowSection(config)}

${generateTeamCollaborationSection(config)}

## üí° Pro Tips for Claude

1. **Context Management**: Use \`/clear\` between major features to manage context
2. **Reference Files**: Use @claude-kickstart.md anytime to remind Claude of your setup
3. **Extended Thinking**: Use "think" for planning, "think hard" for complex problems, "think harder" or "ultrathink" for very complex problems
4. **Visual Development**: For UI work, provide screenshots and iterate
5. **Test-Driven**: Run tests frequently - they guide the implementation
6. **Be Specific**: Clear instructions upfront reduce course corrections later
7. **Multi-Claude**: For complex projects, consider running multiple Claude instances in parallel
8. **Course Correct**: Use Escape to interrupt, double-tap Escape to edit history
9. **File References**: Use tab-completion to reference files, paste URLs for docs
10. **Ask Questions**: Ask for clarification if requirements seem ambiguous

## ‚úÖ Success Criteria

You'll know the setup is correct when:
- [ ] \`${config.packageManager || 'npm'} run dev\` starts without errors
- [ ] The file structure matches exactly
- [ ] All TypeScript has proper types (if applicable)
- [ ] Tests pass (if any exist)
- [ ] The app deploys successfully

---

Remember: The goal is a perfect development environment in < 5 minutes!
Generated with ‚ù§Ô∏è by Claude Kickstart`;
}

// New section generators
function generateGitHubCLISection() {
  const hasGH = detectGitHubCLI();
  
  if (hasGH) {
    return `## ‚úÖ GitHub CLI Detected

Great! You have GitHub CLI installed. Claude can use it for:
- Creating and managing pull requests
- Reading and creating issues  
- Handling GitHub operations
- Code review automation

No additional setup needed!`;
  } else {
    return `## üö® GitHub CLI Recommended

Consider installing GitHub CLI for enhanced Claude Code experience:

\`\`\`bash
# macOS
brew install gh

# Ubuntu/Debian
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
sudo apt update && sudo apt install gh

# Windows
winget install --id GitHub.cli
\`\`\`

After installation: \`gh auth login\`

Benefits: Claude can create PRs, manage issues, and automate GitHub workflows.`;
  }
}

function generateMCPSection(config) {
  if (!config.mcpServers || config.mcpServers.includes('none')) {
    return '';
  }

  const serverConfigs = [];
  
  if (config.mcpServers.includes('puppeteer')) {
    serverConfigs.push(`  "puppeteer": {
    "command": "npx",
    "args": ["@mcp-server/puppeteer"]
  }`);
  }
  
  if (config.mcpServers.includes('sentry')) {
    serverConfigs.push(`  "sentry": {
    "command": "npx",
    "args": ["@mcp-server/sentry"],
    "env": {
      "SENTRY_AUTH_TOKEN": "your-sentry-token"
    }
  }`);
  }
  
  if (config.mcpServers.includes('database')) {
    serverConfigs.push(`  "database": {
    "command": "npx",
    "args": ["@mcp-server/database"],
    "env": {
      "DATABASE_URL": "your-database-url"
    }
  }`);
  }
  
  if (serverConfigs.length === 0) return '';

  return `## üîß MCP Server Configuration

Create \`.mcp.json\` in your project root:

\`\`\`json
{
  "mcpServers": {
${serverConfigs.join(',\n')}
  }
}
\`\`\`

These MCP servers will be available to Claude for enhanced functionality.`;
}

function generateToolAllowlistSection(config) {
  const tools = ['Edit', 'Write'];
  
  // Add stack-specific tools
  if (['TypeScript', 'JavaScript'].includes(config.language)) {
    tools.push('Bash(npm:*)', 'Bash(yarn:*)', 'Bash(pnpm:*)');
  }
  
  if (config.language === 'Python') {
    tools.push('Bash(pip:*)', 'Bash(python:*)');
  }
  
  if (config.testing !== 'none') {
    tools.push('Bash(test:*)', 'Bash(jest:*)', 'Bash(pytest:*)');
  }
  
  // Always add git tools
  tools.push('Bash(git:*)');
  
  // Add MCP tools if configured
  if (config.mcpServers && !config.mcpServers.includes('none')) {
    if (config.mcpServers.includes('puppeteer')) {
      tools.push('mcp__puppeteer__*');
    }
    if (config.mcpServers.includes('sentry')) {
      tools.push('mcp__sentry__*');
    }
  }

  return `## üõ†Ô∏è Recommended Tool Allowlist

Consider allowing these tools in Claude Code for smoother workflow:

\`\`\`bash
# In Claude Code, use /permissions to add:
${tools.map(tool => `- ${tool}`).join('\n')}
\`\`\`

Or add to your \`.claude/settings.json\`:
\`\`\`json
{
  "allowedTools": [${tools.map(t => `"${t}"`).join(', ')}]
}
\`\`\``;
}

function generateWorkflowSection(config) {
  if (!config.preferredWorkflow || config.preferredWorkflow === 'standard') {
    return '';
  }

  const workflows = {
    'explore-plan-code': `## üîÑ Recommended Workflow: Explore ‚Üí Plan ‚Üí Code

Your preferred workflow optimizes for thoughtful development:

1. **Explore Phase**
   - Ask Claude to read relevant files (don't code yet!)
   - Use subagents for complex investigations
   - Example: "Read the authentication system but don't write code yet"

2. **Plan Phase** 
   - Ask Claude to "think" and create a detailed plan
   - Use "think hard" for complex problems
   - Save plans as documents or GitHub issues for later reference

3. **Code Phase**
   - Implement the planned solution
   - Ask Claude to verify reasonableness as it codes
   - Iterate based on feedback

4. **Commit Phase**
   - Have Claude create descriptive commit messages
   - Create pull requests with context-rich descriptions`,

    'tdd': `## üß™ Test-Driven Development Workflow

Your TDD approach ensures robust, well-tested code:

1. **Write Tests First**
   - Ask Claude to write tests based on expected behavior
   - Be explicit: "We're doing TDD - don't write implementation yet"
   - Ensure tests fail initially

2. **Commit Tests**
   - Commit failing tests before implementation
   - This creates a clear development checkpoint

3. **Implement & Iterate**
   - Write code to make tests pass
   - Don't modify tests during implementation
   - Iterate until all tests pass

4. **Verify & Commit**
   - Use subagents to verify implementation quality
   - Commit working code with descriptive messages`,

    'screenshot-ui': `## üì∏ Screenshot-Driven UI Development

Perfect for visual development workflows:

1. **Visual Targets**
   - Provide design mocks via drag-drop or file paths
   - Use cmd+ctrl+shift+4 (macOS) to screenshot to clipboard
   - Paste with ctrl+v in Claude Code

2. **Implement & Capture**
   - Have Claude implement the design
   - Use Puppeteer MCP for automated screenshots
   - Compare results with target designs

3. **Iterate Visually**
   - Claude can see differences and adjust
   - 2-3 iterations typically produce excellent results
   - Focus on pixel-perfect accuracy`,

    'safe-yolo': `## üöÄ Safe YOLO Mode Setup

For autonomous Claude development:

1. **Container Setup** (Recommended)
   - Use Docker Dev Containers for isolation
   - No internet access to prevent data exfiltration
   - Easy to reset if something goes wrong

2. **Usage**
   - Run: \`claude --dangerously-skip-permissions\`
   - Claude works uninterrupted until completion
   - Great for lint fixes, boilerplate generation

3. **Safety Tips**
   - Only use for low-risk tasks
   - Regular backups before YOLO sessions
   - Review changes carefully after completion`,

    'multi-claude': `## üë• Multi-Claude Workflow Setup

For complex, parallel development:

1. **Git Worktrees** (Recommended)
   \`\`\`bash
   git worktree add ../project-feature-a feature-a
   git worktree add ../project-feature-b feature-b
   cd ../project-feature-a && claude  # Terminal 1
   cd ../project-feature-b && claude  # Terminal 2
   \`\`\`

2. **Separation Strategies**
   - One Claude writes code, another reviews
   - Separate Claude instances for independent features
   - Use different terminals/IDE windows

3. **Communication**
   - Shared scratchpad files for Claude-to-Claude communication
   - Regular sync points to merge work
   - Clean up worktrees when done: \`git worktree remove ../project-feature-a\``
  };

  return workflows[config.preferredWorkflow] || '';
}

function generateTeamCollaborationSection(config) {
  if (!config.teamFeatures || config.teamFeatures.includes('none')) {
    return '';
  }

  let content = '## üë• Team Collaboration Setup\n\n';
  
  if (config.teamFeatures.includes('shared-mcp')) {
    content += `### Shared MCP Configuration
- Check \`.mcp.json\` into git for team-wide MCP server access
- All team members get the same Claude Code capabilities
- No individual setup required for new team members

`;
  }
  
  if (config.teamFeatures.includes('team-commands')) {
    content += `### Team Slash Commands
Create shared commands in \`.claude/commands/\`:
- \`fix-github-issue.md\` - Automated issue resolution
- \`deploy-staging.md\` - Standardized deployment process
- \`run-security-scan.md\` - Security verification workflow

`;
  }
  
  if (config.teamFeatures.includes('team-allowlist')) {
    content += `### Standardized Tool Allowlist
Add to \`.claude/settings.json\` (check into git):
\`\`\`json
{
  "allowedTools": ["Edit", "Write", "Bash(git:*)", "Bash(npm:*)", "Bash(test:*)"]
}
\`\`\`

`;
  }
  
  if (config.teamFeatures.includes('review-automation')) {
    content += `### Code Review Automation
Set up GitHub Actions with Claude Code:
- Automated PR descriptions
- Code quality checks
- Security scan reviews
- Suggest improvements automatically

`;
  }
  
  if (config.teamFeatures.includes('issue-triage')) {
    content += `### Issue Triage Automation
Configure headless Claude for:
- Automatic issue labeling
- Priority assignment
- Initial investigation
- Duplicate detection

Example: \`claude -p "Analyze and triage this issue" --allowedTools WebFetch Bash(gh:*)\`

`;
  }

  return content.trim();
}

// Helper functions
function getProjectTypeLabel(type) {
  const labels = {
    'fullstack': 'Full-Stack Web App',
    'backend': 'Backend API',
    'frontend': 'Frontend',
    'cli': 'CLI Tool',
    'mobile': 'Mobile App',
    'datascience': 'Data Science/ML',
    'library': 'Library/Package'
  };
  return labels[type] || type;
}

function getStackLabel(stack, customStack) {
  const labels = {
    'nextjs-app': 'Next.js 14 (App Router)',
    'nextjs-pages': 'Next.js 14 (Pages Router)',
    'remix': 'Remix',
    't3': 'T3 Stack',
    'mern': 'MERN Stack',
    'mean': 'MEAN Stack',
    'express': 'Node.js + Express',
    'fastify': 'Node.js + Fastify',
    'fastapi': 'Python + FastAPI',
    'django': 'Python + Django',
    'gin': 'Go + Gin',
    'rails': 'Ruby on Rails',
    'react': 'React',
    'vue': 'Vue.js',
    'svelte': 'Svelte',
    'angular': 'Angular',
    'vanilla': 'Vanilla JS'
  };
  
  if (stack === 'custom' && customStack) {
    return customStack;
  }
  
  return labels[stack] || customStack || stack || 'Custom';
}

function getLanguageLabel(language, customLanguage) {
  if (language === 'Other' && customLanguage) {
    return customLanguage;
  }
  return language || 'Not specified';
}

function getDatabaseLabel(database, customDatabase) {
  const labels = {
    'postgresql': 'PostgreSQL',
    'mysql': 'MySQL',
    'mongodb': 'MongoDB',
    'sqlite': 'SQLite',
    'supabase': 'Supabase',
    'firebase': 'Firebase',
    'none': 'None'
  };
  
  if (database === 'other' && customDatabase) {
    return customDatabase;
  }
  
  return labels[database] || database;
}

function getDeploymentLabel(deployment) {
  const labels = {
    'vercel': 'Vercel',
    'netlify': 'Netlify',
    'aws': 'AWS',
    'gcp': 'Google Cloud',
    'fly': 'Fly.io',
    'railway': 'Railway',
    'docker': 'Docker/Self-hosted',
    'unsure': 'Not decided yet'
  };
  return labels[deployment] || deployment;
}

function generateFileStructure(config) {
  // This would be expanded based on the stack
  const structures = {
    'nextjs-app': `src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx
‚îÇ   ‚îú‚îÄ‚îÄ globals.css
‚îÇ   ‚îî‚îÄ‚îÄ api/
‚îÇ       ‚îî‚îÄ‚îÄ hello/
‚îÇ           ‚îî‚îÄ‚îÄ route.ts
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îî‚îÄ‚îÄ ui/
‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îî‚îÄ‚îÄ utils.ts
‚îú‚îÄ‚îÄ public/
‚îú‚îÄ‚îÄ .env.local
‚îú‚îÄ‚îÄ next.config.js
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ tailwind.config.ts
‚îî‚îÄ‚îÄ package.json`,
    'express': `src/
‚îú‚îÄ‚îÄ controllers/
‚îú‚îÄ‚îÄ models/
‚îú‚îÄ‚îÄ routes/
‚îú‚îÄ‚îÄ middleware/
‚îú‚îÄ‚îÄ utils/
‚îú‚îÄ‚îÄ app.js
‚îî‚îÄ‚îÄ server.js
.env
package.json`,
    // Add more structures for different stacks
  };
  
  if (config.stack === 'custom') {
    return `# Custom project structure for: ${config.customStack || 'your custom stack'}
# Claude will create an appropriate structure based on your stack description
src/
‚îî‚îÄ‚îÄ (to be determined based on your requirements)`;
  }
  
  return structures[config.stack] || `src/
‚îî‚îÄ‚îÄ index.${getFileExtension(config.language, config.customLanguage)}`;
}

function getFileExtension(language, customLanguage) {
  const lang = language === 'Other' ? customLanguage : language;
  const extensions = {
    'TypeScript': 'ts',
    'JavaScript': 'js',
    'Python': 'py',
    'Go': 'go',
    'Java': 'java',
    'Ruby': 'rb',
    'Rust': 'rs',
    'C++': 'cpp',
    'C#': 'cs'
  };
  return extensions[lang] || 'js';
}

function generateDependencies(config) {
  const deps = {
    'nextjs-app': ['next', 'react', 'react-dom'],
    'nextjs-pages': ['next', 'react', 'react-dom'],
    'express': ['express', 'cors', 'dotenv', 'helmet'],
    'fastify': ['fastify', '@fastify/cors', '@fastify/helmet'],
    'react': ['react', 'react-dom'],
    // Add more based on stack
  };
  
  let allDeps = deps[config.stack] || [];
  
  // If custom stack, provide a placeholder comment
  if (config.stack === 'custom' || allDeps.length === 0) {
    return '# Add your project dependencies here';
  }
  
  // Add database dependencies
  if (config.database === 'postgresql') {
    allDeps.push('pg');
  } else if (config.database === 'mongodb') {
    allDeps.push('mongoose');
  } else if (config.database === 'mysql') {
    allDeps.push('mysql2');
  }
  
  // Add auth dependencies
  if (config.authentication === 'nextauth') {
    allDeps.push('next-auth');
  } else if (config.authentication === 'clerk') {
    allDeps.push('@clerk/nextjs');
  }
  
  // Add styling dependencies
  if (config.styling === 'styled-components') {
    allDeps.push('styled-components');
  } else if (config.styling === 'emotion') {
    allDeps.push('@emotion/react', '@emotion/styled');
  }
  
  return allDeps.join(' ');
}

function generateDevDependencies(config) {
  const devDeps = [];
  
  if (config.language === 'TypeScript') {
    devDeps.push('typescript', '@types/node');
    
    if (config.stack?.includes('react') || config.stack?.includes('next')) {
      devDeps.push('@types/react', '@types/react-dom');
    }
  }
  
  if (config.testing === 'jest') {
    devDeps.push('jest', '@testing-library/react', '@testing-library/jest-dom');
  } else if (config.testing === 'vitest') {
    devDeps.push('vitest', '@testing-library/react');
  }
  
  if (config.styling === 'tailwind') {
    devDeps.push('tailwindcss', 'postcss', 'autoprefixer');
  }
  
  devDeps.push('eslint', 'prettier');
  
  return devDeps.join(' ');
}

function generateConfigFiles(config) {
  let configs = [];
  
  if (config.language === 'TypeScript') {
    configs.push(`### tsconfig.json
\`\`\`json
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "moduleResolution": "bundler",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "jsx": "preserve"
  }
}
\`\`\``);
  }
  
  if (config.styling === 'tailwind') {
    configs.push(`### tailwind.config.ts
\`\`\`typescript
import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './src/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
export default config
\`\`\``);
  }
  
  configs.push(`### .env.example
\`\`\`bash
# Database
DATABASE_URL="postgresql://user:password@localhost:5432/dbname"

# Authentication
AUTH_SECRET="your-secret-key"

# API Keys
# Add your API keys here
\`\`\``);
  
  return configs.join('\n\n');
}

function generateTestingStrategy(config) {
  const strategies = {
    'jest': `- Write unit tests for all utilities and hooks
- Component tests with React Testing Library
- Mock external dependencies
- Aim for 80% code coverage`,
    'vitest': `- Use Vitest for fast unit testing
- Component tests with React Testing Library
- Integration tests for API routes
- Run tests in watch mode during development`,
    'playwright': `- E2E tests for critical user flows
- Test across multiple browsers
- Visual regression testing
- API testing capabilities`,
    'none': `- No testing framework configured yet
- Consider adding tests as the project grows`
  };
  
  return strategies[config.testing] || strategies.none;
}

function generateUIGuidelines(config) {
  if (!config.styling) return '';
  
  const guidelines = {
    'tailwind': `- Use Tailwind utility classes
- Create reusable component classes with @apply
- Mobile-first responsive design
- Use CSS variables for theming`,
    'styled-components': `- Create styled components for reusability
- Use theme provider for consistent styling
- Implement CSS-in-JS best practices`,
    'css-modules': `- One CSS module per component
- Use camelCase for class names
- Compose styles for variants`
  };
  
  return guidelines[config.styling] || '';
}

function generateSecurityGuidelines(config) {
  return `- Never commit .env files
- Validate all user inputs
- Use environment variables for secrets
- Implement proper authentication
- Enable CORS appropriately
- Use HTTPS in production
- Regular dependency updates
- SQL injection prevention (if using SQL)
- XSS protection`;
}

// Label helper functions
function getCodeStyleLabel(style) {
  const labels = {
    'ts-strict': 'TypeScript strict mode enabled',
    'functional': 'Prefer functional programming patterns',
    'self-documenting': 'Write self-documenting code',
    'comments': 'Include detailed comments',
    'early-returns': 'Use early returns for clarity',
    'error-handling': 'Comprehensive error handling'
  };
  return labels[style] || style;
}

function getClaudeBehaviorLabel(behavior) {
  const labels = {
    'explain': 'Explain complex architectural decisions',
    'ask-first': 'Ask before making major changes',
    'tdd': 'Write tests before implementation (TDD)',
    'fast': 'Move fast and iterate quickly',
    'patterns': 'Follow existing code patterns'
  };
  return labels[behavior] || behavior;
}

function getGitCommitLabel(style) {
  const labels = {
    'conventional': 'Conventional commits (feat:, fix:, etc.)',
    'simple': 'Simple, concise commit messages',
    'detailed': 'Detailed commits with body'
  };
  return labels[style] || style;
}

function getBranchStrategyLabel(strategy) {
  const labels = {
    'feature-slash': 'feature/branch-name',
    'feature-dash': 'feature-branch-name',
    'username': 'username/feature-name'
  };
  return labels[strategy] || strategy;
}

function getTestingLabel(testing) {
  const labels = {
    'jest': 'Jest',
    'vitest': 'Vitest',
    'playwright': 'Playwright (E2E)',
    'cypress': 'Cypress (E2E)',
    'pytest': 'Pytest',
    'unittest': 'Python unittest',
    'go-test': 'Go testing',
    'none': 'None configured yet'
  };
  return labels[testing] || testing;
}

function getStylingLabel(styling) {
  const labels = {
    'tailwind': 'Tailwind CSS',
    'css-modules': 'CSS Modules',
    'styled-components': 'Styled Components',
    'vanilla-css': 'Vanilla CSS',
    'scss': 'Sass/SCSS',
    'emotion': 'Emotion'
  };
  return labels[styling] || styling;
}

function getComponentLibraryLabel(library) {
  const labels = {
    'shadcn': 'shadcn/ui',
    'mantine': 'Mantine',
    'mui': 'Material UI',
    'antd': 'Ant Design',
    'chakra': 'Chakra UI',
    'none': 'None - custom components'
  };
  return labels[library] || library;
}